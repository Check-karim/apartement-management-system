# Apartment Management System - Cursor AI Rules

## Project Overview
This is a mobile-first apartment management system built with Next.js, TypeScript, Tailwind CSS, and MySQL. The system supports admin and building manager roles for managing apartments and tenant notifications.

## Technology Stack
- **Frontend**: Next.js 15, React 19, TypeScript
- **Styling**: Tailwind CSS v4 (mobile-first approach)
- **Database**: MySQL
- **Authentication**: NextAuth.js with custom credentials
- **Forms**: React Hook Form with Zod validation
- **Icons**: Lucide React
- **Notifications**: React Hot Toast

## Code Standards

### Mobile-First Design
- All components MUST be designed for mobile devices first
- Use responsive design principles with `sm:`, `md:`, `lg:` prefixes sparingly
- Default styles should work perfectly on mobile (320px - 768px)
- Show "Download App" banner on desktop browsers
- Include online/offline status indicator

### File Structure
```
src/
├── app/
│   ├── (auth)/                    # Authentication pages
│   │   └── login/
│   │       └── page.tsx
│   ├── admin/                     # Admin dashboard
│   │   ├── page.tsx               # Main dashboard
│   │   ├── managers/              # Manager management
│   │   │   ├── page.tsx           # List all managers
│   │   │   ├── create/            # Create new manager
│   │   │   │   └── page.tsx
│   │   │   └── [id]/              # Edit existing manager
│   │   │       └── page.tsx
│   │   ├── buildings/             # Building management
│   │   │   ├── page.tsx           # List all buildings
│   │   │   ├── create/            # Create new building
│   │   │   │   └── page.tsx
│   │   │   └── [id]/              # Building details & edit
│   │   │       ├── page.tsx       # Building details
│   │   │       └── edit/
│   │   │           └── page.tsx   # Edit building
│   │   ├── apartments/            # Apartment management
│   │   │   ├── page.tsx           # List all apartments
│   │   │   ├── create/            # Create new apartment
│   │   │   │   └── page.tsx
│   │   │   └── [id]/              # Apartment details & edit
│   │   │       ├── page.tsx       # Apartment details
│   │   │       └── edit/
│   │   │           └── page.tsx   # Edit apartment
│   │   ├── reports/               # Reports section
│   │   │   ├── page.tsx           # Reports hub
│   │   │   ├── bills/
│   │   │   │   └── page.tsx       # Bill reports
│   │   │   ├── payments/
│   │   │   │   └── page.tsx       # Payment reports
│   │   │   ├── apartments/
│   │   │   │   └── page.tsx       # Apartment reports
│   │   │   └── buildings/
│   │   │       └── page.tsx       # Building reports
│   │   ├── notifications/         # Notifications section
│   │   │   ├── page.tsx           # Notifications hub
│   │   │   ├── maintenance/
│   │   │   │   └── page.tsx       # Maintenance notifications
│   │   │   ├── water/
│   │   │   │   └── page.tsx       # Water notifications
│   │   │   └── compound/
│   │   │       └── page.tsx       # Compound notifications
│   │   ├── settings/              # Settings section
│   │   │   ├── page.tsx           # Settings hub
│   │   │   ├── currency/
│   │   │   │   └── page.tsx       # Currency settings
│   │   │   └── water-formula/
│   │   │       └── page.tsx       # Water formula settings
│   │   └── profile/               # Profile management
│   │       └── page.tsx           # Admin profile
│   ├── manager/                   # Manager dashboard
│   │   └── page.tsx
│   ├── api/                       # API routes
│   │   ├── auth/
│   │   │   └── [...nextauth]/
│   │   │       └── route.ts       # NextAuth configuration
│   │   ├── users/
│   │   │   └── managers/
│   │   │       ├── route.ts       # List/Create managers
│   │   │       └── [id]/
│   │   │           └── route.ts   # Get/Update/Delete individual manager
│   │   ├── buildings/
│   │   │   ├── route.ts           # List/Create buildings
│   │   │   └── [id]/
│   │   │       └── route.ts       # Get/Update/Delete individual building
│   │   ├── apartments/
│   │   │   ├── route.ts           # List/Create apartments
│   │   │   └── [id]/
│   │   │       └── route.ts       # Get/Update/Delete individual apartment
│   │   └── currencies/
│   │       ├── route.ts           # List/Create currencies
│   │       └── [id]/
│   │           └── route.ts       # Get/Update/Delete individual currency
│   ├── components/                # Shared components
│   │   ├── mobile-header.tsx
│   │   ├── conditional-header.tsx
│   │   └── app-install-banner.tsx
│   ├── layout.tsx                 # Root layout
│   ├── page.tsx                   # Home page
│   ├── providers.tsx              # Context providers
│   └── globals.css                # Global styles
├── lib/
│   ├── db.ts                      # Database connection
│   └── auth.ts                    # Authentication config
└── types/
    └── index.ts                   # TypeScript type definitions
```

### Component Guidelines
1. **Mobile-First Components**: Always design for mobile screens first
2. **TypeScript**: Use strict typing for all props and state
3. **Tailwind Classes**: Use semantic class names, prefer utility classes
4. **Accessibility**: Include proper ARIA labels and keyboard navigation
5. **Performance**: Optimize for mobile networks (lazy loading, minimal JS)

### API Routes
- Use Next.js 13+ App Router API routes
- Implement proper error handling and validation
- Return consistent JSON responses
- Include proper HTTP status codes
- Add request/response logging for debugging
- **Authentication**: `/api/auth/[...nextauth]` - NextAuth.js configuration
- **Manager CRUD**: `/api/users/managers` (GET, POST) and `/api/users/managers/[id]` (GET, PUT, DELETE)
- **Building CRUD**: `/api/buildings` (GET, POST) and `/api/buildings/[id]` (GET, PUT, DELETE)
- **Apartment CRUD**: `/api/apartments` (GET, POST) and `/api/apartments/[id]` (GET, PUT, DELETE)
- **Currency CRUD**: `/api/currencies` (GET, POST) and `/api/currencies/[id]` (GET, PUT, DELETE)
- All endpoints support filtering via query parameters (e.g., `?building_id=1`)

### Database Patterns
- Use MySQL with mysql2 library
- Implement proper connection pooling
- Use prepared statements to prevent SQL injection
- Include proper error handling and connection cleanup
- Follow the schema defined in database.sql
- Database triggers automatically maintain `buildings.total_apartments` count
- Triggers handle INSERT, UPDATE, and DELETE operations on apartments table

### Authentication Rules
- Admin credentials: username='admin', password='admin' (predefined)
- Building managers created and managed by admin
- Use NextAuth.js for session management
- Implement proper role-based access control
- Secure API routes with middleware
- Manager CRUD operations (Create, Read, Update, Delete) admin-only
- Password updates optional (leave blank to keep current)
- Account activation/deactivation toggle for managers

### State Management
- Use React hooks for local state
- Implement proper loading and error states
- Use React Hot Toast for user feedback
- Handle offline scenarios gracefully

### UI/UX Guidelines
- **Color Scheme**: Use modern, accessible colors
- **Typography**: Clear hierarchy with readable fonts
- **Spacing**: Consistent padding and margins
- **Buttons**: Large touch targets (min 44px)
- **Forms**: Clear validation messages and feedback
- **Navigation**: Simple, intuitive mobile navigation
- **Input Fields**: Dark text (`text-gray-900`) with visible placeholders (`placeholder-gray-500`)
- **Form Layout**: Mobile-first with proper spacing and touch-friendly controls
- **Loading States**: Spinner animations for async operations
- **Error Handling**: Toast notifications with proper color coding

### Error Handling
- Graceful error boundaries
- User-friendly error messages
- Proper logging for debugging
- Fallback UI for network errors
- Offline capability notifications

### Performance Requirements
- Fast Time to Interactive (TTI) on mobile
- Minimal JavaScript bundle size
- Optimized images and assets
- Progressive Web App (PWA) capabilities
- Efficient database queries

### Security Practices
- Input validation on both client and server
- SQL injection prevention
- XSS protection
- CSRF protection with NextAuth
- Secure password hashing (bcrypt)
- Rate limiting for API endpoints

## Naming Conventions
- **Files**: kebab-case (apartment-list.tsx)
- **Components**: PascalCase (ApartmentCard)
- **Functions**: camelCase (getUserData)
- **Variables**: camelCase (apartmentData)
- **Constants**: SCREAMING_SNAKE_CASE (MAX_RENT_AMOUNT)
- **Database**: snake_case (apartment_id, created_at)

## Testing Guidelines
- Write unit tests for utility functions
- Test API endpoints with proper mocking
- Test components with mobile-first approach
- Include accessibility testing
- Test offline functionality

## Deployment Notes
- Optimize for production builds
- Environment variables for database connection
- Proper error logging and monitoring
- Mobile performance optimization
- PWA manifest and service worker

## Development Workflow
1. Start with mobile design (320px width)
2. Implement TypeScript interfaces first
3. Build API endpoints with proper validation
4. Create reusable components
5. Test on various mobile devices
6. Optimize performance and accessibility

## Admin Interface Structure
The admin interface follows a modern card-based design with the following sections:

### Main Dashboard (`/admin`)
- Gradient header with welcome message
- 4 stat cards: Managers, Buildings, Apartments, Occupancy Rate
- Navigation menu organized by sections:
  - **Management**: Managers, Buildings & Apartments
  - **Reports & Analytics**: All report types
  - **Communication**: Notifications
  - **Settings**: Currency, Water Formula, General
  - **Profile**: Admin profile management

### Manager Management
- **List Page** (`/admin/managers`): Search, filter, view/edit/delete actions
- **Create Page** (`/admin/managers/create`): Form with validation
- **Edit Page** (`/admin/managers/[id]`): Update manager details

### Building Management
- **List Page** (`/admin/buildings`): Search, view building details
- **Create Page** (`/admin/buildings/create`): Add new building with manager assignment
- **Details Page** (`/admin/buildings/[id]`): Full building info, apartment list, quick actions
- **Edit Page** (`/admin/buildings/[id]/edit`): Update building information

### Apartment Management
- **List Page** (`/admin/apartments`): Search, multi-filter (building, occupancy), view all units
- **Create Page** (`/admin/apartments/create`): Add new apartment with optional tenant info
- **Details Page** (`/admin/apartments/[id]`): Complete apartment and tenant information
- **Edit Page** (`/admin/apartments/[id]/edit`): Update apartment and tenant details

### Reports Section
- **Reports Hub** (`/admin/reports`): Navigation to all report types
- **Bill Reports** (`/admin/reports/bills`): Date range filtering
- **Payment Reports** (`/admin/reports/payments`): Payment analytics and stats
- **Apartment Reports** (`/admin/reports/apartments`): Occupancy and revenue stats
- **Building Reports** (`/admin/reports/buildings`): Building performance analytics

### Notifications
- **Notifications Hub** (`/admin/notifications`): 3 notification types
- **Maintenance** (`/admin/notifications/maintenance`): Maintenance alerts with priority
- **Water** (`/admin/notifications/water`): Water billing notifications
- **Compound** (`/admin/notifications/compound`): General announcements

### Settings
- **Settings Hub** (`/admin/settings`): Navigation to settings
- **Currency** (`/admin/settings/currency`): Currency configuration with live preview
- **Water Formula** (`/admin/settings/water-formula`): Billing formula with calculation example

### Profile Management
- **Admin Profile** (`/admin/profile`): Two-tab interface (Profile Info & Security)
- Update personal information and change password

## Common Patterns
- Use React Hook Form for all forms
- Zod for runtime type validation with zodResolver
- Consistent error handling across components
- Loading states for all async operations
- Proper TypeScript typing for all functions
- Mobile-optimized touch interactions
- Input text visibility: use `text-gray-900 placeholder-gray-500` classes
- RESTful API design with proper HTTP status codes
- Dynamic routes with Next.js App Router: `[id]/page.tsx`
- Form validation on both client and server side
- Card-based layouts with shadows and hover effects
- Gradient backgrounds for headers and accent elements
- Color-coded sections for easy navigation
- Touch-friendly buttons (min 44px height)
- Consistent spacing and typography
- Toast notifications for user feedback

## Database Enhancements
- `system_settings` table for configuration management
- `admin_dashboard_stats` view for dashboard statistics
- `building_performance` view for building analytics
- `payment_analytics` view for payment reporting
- Default settings for currency and water billing
- Database triggers for automatic apartment count synchronization
  - `after_apartment_insert`: Updates building count on new apartment
  - `after_apartment_delete`: Updates building count on apartment deletion
  - `after_apartment_update`: Handles building changes when apartment is moved

Remember: This is a mobile-first application. Every feature should work perfectly on mobile devices before considering desktop adaptations. 